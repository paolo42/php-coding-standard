imports:
    - { resource: '%vendor_dir%/symplify/easy-coding-standard/config/set/psr2.yaml' }

services:
    #  Function http_build_query() should always have specified `$arg_separator` parameter
    Lmc\CodingStandard\Fixer\SpecifyArgSeparatorFixer: ~

    # Class and Interface names should be unique in a project, they should never be duplicated
    PHP_CodeSniffer\Standards\Generic\Sniffs\Classes\DuplicateClassNameSniff: ~
    # Control Structures must have at least one statement inside of the body (empty catch rules is skipped)
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff: ~
    # For loops that have only a second expression (the condition) should be converted to while loops
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\ForLoopShouldBeWhileLoopSniff: ~
    # Incrementers in nested loops should use different variable names
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\JumbledIncrementerSniff: ~
    # If statements that are always evaluated should not be used
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\UnconditionalIfStatementSniff: ~
    # Methods should not be declared final inside of classes that are declared final
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\UnnecessaryFinalModifierSniff: ~
    # Methods should not be defined that only call the parent method
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\UselessOverridingMethodSniff: ~
    # Doc comment formatting (but some of the rules are skipped)
    PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff: ~
    # Line length should not exceed 120 characters
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\LineLengthSniff:
        absoluteLineLimit: 0
        lineLimit: 120
    # There should only be one class defined in a file
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\OneClassPerFileSniff: ~
    # There should only be one interface defined in a file
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\OneInterfacePerFileSniff: ~
    # There should only be one trait defined in a file
    PHP_CodeSniffer\Standards\Generic\Sniffs\Files\OneTraitPerFileSniff: ~
    # Exactly one space is allowed after a cast
    PHP_CodeSniffer\Standards\Generic\Sniffs\Formatting\SpaceAfterCastSniff: ~
    # Some functions should not appear in the code
    PHP_CodeSniffer\Standards\Generic\Sniffs\PHP\ForbiddenFunctionsSniff:
        forbiddenFunctions:
            var_dump: null
            dump: null
            echo: null
            require: null
            require_once: null
            include: null
            include_once: null
            phpinfo: null
            eval: null
            printf: null
    # When referencing arrays you should not put whitespace around the opening bracket or before the closing bracket
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayBracketSpacingSniff: ~
    # Various array declaration rules (but some of the rules are skipped)
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff: ~
    # The self keyword should be used instead of the current class name
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Classes\SelfMemberReferenceSniff: ~
    # The asterisks in a doc comment should align, and there should be one space between the asterisk and tags
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\DocCommentAlignmentSniff: ~
    # Empty catch statements must have comment explaining why the exception is not handled
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\EmptyCatchCommentSniff: ~
    # Tests that the ++ operators are used when possible and not used when it makes the code confusing
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Operators\IncrementDecrementUsageSniff: ~
    # Verifies that class members have scope modifiers
    PHP_CodeSniffer\Standards\Squiz\Sniffs\Scope\MemberVarScopeSniff: ~
    # Casts should not have whitespace inside the parentheses
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\CastSpacingSniff: ~
    # The php constructs like echo, return, include, etc. should have one space after them
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\LanguageConstructSpacingSniff: ~
    # Verifies that operators have valid spacing surrounding them
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\LogicalOperatorSpacingSniff: ~
    # Proper operator spacing
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\OperatorSpacingSniff:
        ignoreNewlines: true
    # The php keywords static, public, private, and protected should have one space after them
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\ScopeKeywordSpacingSniff: ~
    # Semicolons should not have spaces before them
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SemicolonSpacingSniff: ~

    PhpCsFixer\Fixer\Alias\MbStrFunctionsFixer: ~
    PhpCsFixer\Fixer\Alias\NoAliasFunctionsFixer: ~
    PhpCsFixer\Fixer\Alias\RandomApiMigrationFixer: ~
    # Cast shall be used, not `settype()`
    PhpCsFixer\Fixer\Alias\SetTypeToCastFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
        syntax: short
    PhpCsFixer\Fixer\ArrayNotation\NormalizeIndexBraceFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\NoTrailingCommaInSinglelineArrayFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\TrailingCommaInMultilineArrayFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\TrimArraySpacesFixer: ~
    PhpCsFixer\Fixer\ArrayNotation\WhitespaceAfterCommaInArrayFixer: ~
    PhpCsFixer\Fixer\Basic\BracesFixer:
        allow_single_line_closure: true
    PhpCsFixer\Fixer\Basic\Psr4Fixer: ~
    PhpCsFixer\Fixer\Casing\MagicMethodCasingFixer: ~
    PhpCsFixer\Fixer\Casing\NativeFunctionCasingFixer: ~
    PhpCsFixer\Fixer\CastNotation\CastSpacesFixer: ~
    PhpCsFixer\Fixer\CastNotation\LowercaseCastFixer: ~
    PhpCsFixer\Fixer\CastNotation\ShortScalarCastFixer: ~
    PhpCsFixer\Fixer\ClassNotation\ClassAttributesSeparationFixer:
        elements:
            - method
    PhpCsFixer\Fixer\ClassNotation\NoBlankLinesAfterClassOpeningFixer: ~
    PhpCsFixer\Fixer\ClassNotation\SelfAccessorFixer: ~
    PhpCsFixer\Fixer\ClassNotation\VisibilityRequiredFixer: ~
    PhpCsFixer\Fixer\Comment\NoEmptyCommentFixer: ~
    PhpCsFixer\Fixer\ControlStructure\NoUselessElseFixer: ~
    PhpCsFixer\Fixer\ControlStructure\YodaStyleFixer:
        equal: false
        identical: false
        less_and_greater: false
    # Replace multiple nested calls of `dirname` by only one call with second `$level` parameter.
    PhpCsFixer\Fixer\FunctionNotation\CombineNestedDirnameFixer: ~
    # Order the flags in `fopen` calls, `b` and `t` must be last.
    PhpCsFixer\Fixer\FunctionNotation\FopenFlagOrderFixer: ~
    # The flags in `fopen` calls must contain `b` and must omit `t`.
    PhpCsFixer\Fixer\FunctionNotation\FopenFlagsFixer: ~
    # Add missing space between function's argument and its typehint.
    PhpCsFixer\Fixer\FunctionNotation\FunctionTypehintSpaceFixer: ~
    # Function `implode` must be called with 2 arguments in the documented order.
    PhpCsFixer\Fixer\FunctionNotation\ImplodeCallFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\NoUnreachableDefaultArgumentValueFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\ReturnTypeDeclarationFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\VoidReturnFixer: ~
    PhpCsFixer\Fixer\Import\NoLeadingImportSlashFixer: ~
    PhpCsFixer\Fixer\Import\NoUnusedImportsFixer:
    PhpCsFixer\Fixer\Import\OrderedImportsFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\DeclareEqualNormalizeFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\IsNullFixer:
        use_yoda_style: false
    PhpCsFixer\Fixer\ListNotation\ListSyntaxFixer:
        syntax: short
    PhpCsFixer\Fixer\NamespaceNotation\NoLeadingNamespaceWhitespaceFixer: ~
    PhpCsFixer\Fixer\NamespaceNotation\SingleBlankLineBeforeNamespaceFixer: ~
    PhpCsFixer\Fixer\Operator\BinaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\Operator\ConcatSpaceFixer:
        spacing: one
    PhpCsFixer\Fixer\Operator\NewWithBracesFixer: ~
    PhpCsFixer\Fixer\Operator\ObjectOperatorWithoutWhitespaceFixer: ~
    PhpCsFixer\Fixer\Operator\StandardizeNotEqualsFixer: ~
    PhpCsFixer\Fixer\Operator\TernaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\Operator\TernaryToNullCoalescingFixer: ~
    PhpCsFixer\Fixer\Operator\UnaryOperatorSpacesFixer: ~
    PhpCsFixer\Fixer\Phpdoc\NoBlankLinesAfterPhpdocFixer: ~
    PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer: ~
    # Removes `@param` and `@return` tags that don't provide any useful information
    PhpCsFixer\Fixer\Phpdoc\NoSuperfluousPhpdocTagsFixer:
        allow_mixed: true # allow `@mixed` annotations to be preserved
    PhpCsFixer\Fixer\Phpdoc\PhpdocAddMissingParamAnnotationFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocIndentFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoAccessFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoEmptyReturnFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoPackageFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocOrderFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocReturnSelfReferenceFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocScalarFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocSingleLineVarSpacingFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocTrimFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocTypesFixer: ~
    # `@var` and `@type` annotations must have type and name in the correct order
    PhpCsFixer\Fixer\Phpdoc\PhpdocVarAnnotationCorrectOrderFixer: ~
    PhpCsFixer\Fixer\PhpTag\FullOpeningTagFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitConstructFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitDedicateAssertFixer: ~
    # Use dedicated helper methods createMock() and createPartialMock() where possible
    PhpCsFixer\Fixer\PhpUnit\PhpUnitMockFixer: ~
    # Use expectedException*() methods instead of @expectedException* annotation (both following fixers must be applied to do so)
    PhpCsFixer\Fixer\PhpUnit\PhpUnitNoExpectationAnnotationFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitExpectationFixer: ~
    # Order `@covers` annotation of PHPUnit tests
    PhpCsFixer\Fixer\PhpUnit\PhpUnitOrderedCoversFixer: ~
    # Visibility of setUp() and tearDown() method should be kept protected
    PhpCsFixer\Fixer\PhpUnit\PhpUnitSetUpTearDownVisibilityFixer: ~
    # Calls to `PHPUnit\Framework\TestCase` static methods must all be of the same type (`$this->...`)
    PhpCsFixer\Fixer\PhpUnit\PhpUnitTestCaseStaticMethodCallsFixer:
        call_type: 'this'
    PhpCsFixer\Fixer\ReturnNotation\NoUselessReturnFixer: ~
    PhpCsFixer\Fixer\Semicolon\NoEmptyStatementFixer: ~
    PhpCsFixer\Fixer\Semicolon\NoSinglelineWhitespaceBeforeSemicolonsFixer: ~
    PhpCsFixer\Fixer\Semicolon\SpaceAfterSemicolonFixer: ~
    PhpCsFixer\Fixer\Strict\DeclareStrictTypesFixer: ~
    PhpCsFixer\Fixer\Strict\StrictParamFixer: ~
    PhpCsFixer\Fixer\StringNotation\SingleQuoteFixer: ~
    PhpCsFixer\Fixer\Whitespace\BlankLineBeforeStatementFixer:
        statements:
            - return
            - try
    PhpCsFixer\Fixer\Whitespace\CompactNullableTypehintFixer: ~
    PhpCsFixer\Fixer\Whitespace\NoExtraBlankLinesFixer:
        tokens:
            - break
            - continue
            - curly_brace_block
            - extra
            - parenthesis_brace_block
            - return
            - square_brace_block
            - throw
            - use
            - use_trait
    PhpCsFixer\Fixer\Whitespace\NoWhitespaceInBlankLineFixer: ~

    SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff: ~

    Symplify\CodingStandard\Sniffs\Naming\AbstractClassNameSniff: ~
    Symplify\CodingStandard\Sniffs\Naming\ClassNameSuffixByParentSniff:
        defaultParentClassToSuffixMap:
            '*Command': 'Command'
            '*Controller': 'Controller'
            '*Repository': 'Repository'
            '*Presenter': 'Presenter'
            '*Request': 'Request'
            '*Response': 'Response'
            '*FixerInterface': 'Fixer'
            '*Sniff': 'Sniff'
            '*Exception': 'Exception'
            '*Handler': 'Handler'
    Symplify\CodingStandard\Sniffs\Naming\InterfaceNameSniff: ~
    Symplify\CodingStandard\Sniffs\Naming\TraitNameSniff: ~

parameters:
    skip:
         # We allow empty catch statements (but they must have comment - see EmptyCatchCommentSniff)
        PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\EmptyStatementSniff.DetectedCatch: ~

         # Skip unwanted rules from DocCommentSniff
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.ContentAfterOpen: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.ContentBeforeClose: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.MissingShort: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.NonParamGroup: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.ParamGroup: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.ParamNotFirst: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.SpacingBeforeTags: ~
        PHP_CodeSniffer\Standards\Generic\Sniffs\Commenting\DocCommentSniff.TagValueIndent: ~

        # Skip unwanted rules from ArrayDeclarationSniff
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.CloseBraceNotAligned: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.DoubleArrowNotAligned: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.KeyNotAligned: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.MultiLineNotAllowed: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.SingleLineNotAllowed: ~
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Arrays\ArrayDeclarationSniff.ValueNotAligned: ~

         # There could be more than one space after star (eg. in Doctrine annotations)
        PHP_CodeSniffer\Standards\Squiz\Sniffs\Commenting\DocCommentAlignmentSniff.SpaceAfterStar: ~
